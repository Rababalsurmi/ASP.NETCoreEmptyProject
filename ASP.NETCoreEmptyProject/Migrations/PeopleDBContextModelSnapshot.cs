// <auto-generated />
using ASP.NETCoreEmptyProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASP.NETCoreEmptyProject.Migrations
{
    [DbContext(typeof(PeopleDBContext))]
    partial class PeopleDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.CityModel", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CityName");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityName = "Stockholm"
                        },
                        new
                        {
                            CityName = "Frankfurt"
                        },
                        new
                        {
                            CityName = "Oslo"
                        });
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.CountryCityModel", b =>
                {
                    b.Property<string>("CountryName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CountryName", "CityName");

                    b.HasIndex("CityName");

                    b.ToTable("CountryCity");

                    b.HasData(
                        new
                        {
                            CountryName = "Sweden",
                            CityName = "Stockholm"
                        },
                        new
                        {
                            CountryName = "Germany",
                            CityName = "Frankfurt"
                        },
                        new
                        {
                            CountryName = "Norway",
                            CityName = "Oslo"
                        });
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.CountryModel", b =>
                {
                    b.Property<string>("CountryName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CountryName");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryName = "Sweden"
                        },
                        new
                        {
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryName = "Norway"
                        });
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.LanguageModel", b =>
                {
                    b.Property<string>("Language")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Language");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Language = "English"
                        },
                        new
                        {
                            Language = "German"
                        },
                        new
                        {
                            Language = "Norwegian"
                        });
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.PeoplLanguagesModel", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<string>("Language")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PersonId", "Language");

                    b.HasIndex("Language");

                    b.ToTable("PeopleLanguages");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Language = "English"
                        },
                        new
                        {
                            PersonId = 1,
                            Language = "Norwegian"
                        },
                        new
                        {
                            PersonId = 3,
                            Language = "English"
                        },
                        new
                        {
                            PersonId = 3,
                            Language = "German"
                        },
                        new
                        {
                            PersonId = 2,
                            Language = "Norwegian"
                        });
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.PeopleCityModel", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PersonId", "CityName");

                    b.HasIndex("CityName");

                    b.ToTable("PeopleCity");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            CityName = "Stockholm"
                        },
                        new
                        {
                            PersonId = 2,
                            CityName = "Frankfurt"
                        },
                        new
                        {
                            PersonId = 3,
                            CityName = "Oslo"
                        });
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.PersonModel", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasMaxLength(10)
                        .HasDefaultValue(0);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Phone")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.HasKey("PersonId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            City = "Skövde",
                            Name = "Tom",
                            Phone = 712345678
                        },
                        new
                        {
                            PersonId = 2,
                            City = "Kungälv",
                            Name = "John",
                            Phone = 712345678
                        },
                        new
                        {
                            PersonId = 3,
                            City = "Göteborg",
                            Name = "Jonas",
                            Phone = 712345678
                        });
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.CountryCityModel", b =>
                {
                    b.HasOne("ASP.NETCoreEmptyProject.Models.CityModel", "city")
                        .WithMany("CountryCity")
                        .HasForeignKey("CityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP.NETCoreEmptyProject.Models.CountryModel", "country")
                        .WithMany("CountryCity")
                        .HasForeignKey("CountryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.PeoplLanguagesModel", b =>
                {
                    b.HasOne("ASP.NETCoreEmptyProject.Models.LanguageModel", "language")
                        .WithMany("PeopleLanguages")
                        .HasForeignKey("Language")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP.NETCoreEmptyProject.Models.PersonModel", "person")
                        .WithMany("PeopleLanguages")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASP.NETCoreEmptyProject.Models.PeopleCityModel", b =>
                {
                    b.HasOne("ASP.NETCoreEmptyProject.Models.CityModel", "city")
                        .WithMany("PeopleCity")
                        .HasForeignKey("CityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP.NETCoreEmptyProject.Models.PersonModel", "person")
                        .WithMany("PeopleCity")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
